# Generated by Django 4.0.3 on 2022-05-05 12:20

import app.api.enums
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('name', models.TextField(max_length=64)),
                ('comment', models.TextField(max_length=255)),
                ('type', models.CharField(choices=[('FIREWALL', 'FIREWALL'), ('CLUSTER', 'CLUSTER')], default=app.api.enums.DeviceType['FIREWALL'], max_length=64)),
            ],
            options={
                'verbose_name': 'Device',
            },
        ),
        migrations.CreateModel(
            name='DeviceFolder',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('name', models.TextField(max_length=64)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='folders', to='api.device')),
            ],
            options={
                'verbose_name': 'Device Folder',
            },
        ),
        migrations.CreateModel(
            name='ICMPService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icmp_type', models.IntegerField(default=0)),
                ('icmp_code', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Object',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('name', models.TextField(max_length=32)),
                ('comment', models.TextField(max_length=255)),
                ('range_start', models.TextField(max_length=64)),
                ('range_end', models.TextField(max_length=64)),
                ('lock', models.CharField(choices=[('LOCKED', app.api.enums.LockStatus['LOCKED']), ('UNLOCKED', app.api.enums.LockStatus['UNLOCKED'])], default=app.api.enums.LockStatus['UNLOCKED'], max_length=64)),
            ],
            options={
                'verbose_name': 'Object',
            },
        ),
        migrations.CreateModel(
            name='PortRangeService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port_start', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)])),
                ('port_end', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)])),
                ('protocol', models.CharField(choices=[('TCP', 'TCP'), ('UDP', 'UDP'), ('ICMP', 'ICMP')], default=app.api.enums.Protocol['UDP'], max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('name', models.TextField(max_length=64)),
            ],
            options={
                'verbose_name': 'Repository',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('name', models.TextField(max_length=128)),
                ('comment', models.TextField(max_length=255)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='api.repository')),
            ],
            options={
                'verbose_name': 'Service',
                'unique_together': {('id', 'repository')},
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('name', models.TextField(max_length=64)),
                ('comment', models.TextField(blank=True, max_length=255)),
                ('direction', models.CharField(choices=[('INBOUND', 'INBOUND'), ('OUTBOUND', 'OUTBOUND')], default=app.api.enums.RuleDirection['INBOUND'], max_length=64)),
                ('action', models.CharField(choices=[('ACCEPT', 'ACCEPT'), ('DENY', 'DENY')], default=app.api.enums.RuleAction['ACCEPT'], max_length=64)),
                ('destinations', models.ManyToManyField(related_name='rule_destinations', to='api.object')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='api.device')),
                ('folder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rule_folders', to='api.devicefolder')),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.repository')),
                ('services_destinations', models.ManyToManyField(blank=True, null=True, related_name='rule_services_destination', to='api.service')),
                ('services_sources', models.ManyToManyField(blank=True, null=True, related_name='rule_services_source', to='api.service')),
                ('sources', models.ManyToManyField(related_name='rule_sources', to='api.object')),
            ],
            options={
                'verbose_name': 'Rule',
            },
        ),
        migrations.AddField(
            model_name='object',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objectlist', to='api.repository'),
        ),
        migrations.AddField(
            model_name='device',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='api.repository'),
        ),
        migrations.CreateModel(
            name='CollectionService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('members', models.ManyToManyField(related_name='members', to='api.service')),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('name', models.TextField(max_length=64)),
                ('comment', models.TextField(max_length=255)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.repository')),
            ],
            options={
                'verbose_name': 'Collection',
            },
        ),
    ]
